package chapter04;

/**
 * IO基本操作
 * @author HuanQing
 * @since 2020-11-10
 */
public class Case01IOOperator {

	// 1. 【基本IO操作】
	// 1.1. 【IS与OS】
	// 1.1.1. 【输入与输出】
	// 我们编写的程序除了自身会定义一些数据外，经常还会引用外界的数据，或者是将自身的数据发送到外界。比如，我们编写的程序想读取一个文本文件，又或者我们想将程序中的某些数据写入到一个文件中。
	// 这是我们就要使用输入与输出。
	// 什么是输入：输入是一个从外界进入到程序的方向，通常我们需要读取外界的数据时，使用输入。所以，输入是用来读取数据的。
	// 什么是输出：输出是一个从程序发送到外界的方向，通常我们需要写出数据到外界时，使用呼出。所以，输出是用来写出数据的。
	
	// 1.1.2. 【IS与OS】节点流与处理流
	// 按照流是否直接与特定的地方（如磁盘、内存、设备等）相连，分为节点流和处理流两类。
	// 节点流：可以从或向一个特定的地方（节点）读写数据。
	// 处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。
	// 处理流的构造方法总是要带一个其它的流对象做参数。一个流对象经过其它流的多次包装，成为流的链接。
	// 通常节点流也称为低级流。
	// 通常处理流也称为高级流或过滤流。
	
	// 1.1.3. 【IS与OS】IS和OS常用方法
	// InputStream是所有字节输入流的父类，其定义了基础的读写方法，常用的方法如下：
	// int read()：读取一个字节，以int形式返回，该int值的“低8位”有效，若返回值为-1则表示EOF。
	// int read(byte[] d)：尝试最多读取给定数组的length个字节并存入该数组，返回值为实际读取到的字节量。
	// OutputStream是所有字节输出流的父类，其定义了基础的写出方法，常用的方法如下：
	// void write(int d)：写出一个字节，写的是给定的int的“低8位”。
	// void write(int[] d)：将给定的字节数组中的所有字节全部写出。
	
	
	// 1.2. 【文件流】
}
